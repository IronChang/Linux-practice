文件系统：
	存储文件的流程：
		1、在超级快中找到inodetable首地址，以及inodebitmap的首地址，然后通过inodebitmap找到空闲的的inode编号，再去inodetable找到该空闲的的inode节点；
		2、在超级快中找到databitmap首地址，以及datetable的首地址，然后通过databitmap中找到空闲的数据块首地址，再去datatable找到空闲的数据块；
		3、在inode中添加文件原信息(文件大小、权限、用户、时间)，以及将要存储文件的数据块和inode关联起来；
	    4、在文件所在目录中添加文件的目录项，(目录文件的数据块中存的就是目录项就是各个文件的inode节点号）文件名 == inode节点号；
	
	读取文件的流程：
	
		1、通过文件名，在目录的目录项中找到文件对应的inode节点号；		
		2、在inodetable中通过inode节点号快速找到inode节点，获取到文件的原信息，以及存储文件的数据块号；		
		3、通过数据块号，可以在磁盘的数据块上快速读取文件；
		
	创建文件失败原因：
		
		1、inode节点号被用完 		
		2、没有空间
		
	注意：	每一个文件都有一个唯一的inode节点
	
	
软连接/硬链接：
	作用：
		可以通过软连接文件或者硬链接文件来操作源文件
	
	创建命令： 
		ln + 源文件 + 硬链接文件(默认创建硬链接)
		ls -i 查看文件的inode节点号
		ln -s  + 源文件 + 软链接文件 创建一个软连接
	本质区别：
		软连接文件是一个独立的文件，类似于文件的快捷方式，有自己的inode节点。文件类型为：l
		硬链接文件是一个文件的目录项，类似于一个文件的别名，与源文件指向相同的inode节点。文件类型为：-
		
		软连接文件通过存储的源文件路径找到源文件的inode节点，进而访问文件
		硬链接文件直接通过自己的inode节点直接访问文件数据
		
		删除源文件，软连接失效，硬链接仅仅是链接数-1，仍然可以访问
		
		软连接可以跨分区建立，但是硬链接不可以
		软连接可以对目录创建，但是硬链接不可以
		
动态库/静态库：
		
	生成：文件a.c b.c
		动态库：
			gcc -fPIC -c b.c -o b.o ; gcc --share b.o -o libmytest.so(动态库后缀 .so)
			
		静态库：
			gcc -c b.c -o b.o ; ar -cr libmytest.a b.o(静态库后缀 .a
		gcc选项：
			-fPIC：产生位置无关代码（需要仔细了解）
			--share：生成一个共享库而不是可执行程序
			-l：指定链接库名称 ， 只需要库名(去掉lib和版本号)
			-L：链接库所在的路径; 栗子：-L .
			-I：指定头文件搜索路径
		ar：静态库打包命令
			-c：创建
			-r：替换
			-t：列出静态库中的文件信息
			-v：verbose详细信息
	使用：
		链接库：libmytest.so(动)    libmytest.a(静)

		库的查找路径：每一个库都有一个自己的默认查找路径 .lib64  /usr/lib64
			设置环境变量：LIBRARY_PATH = .(库的链接路径)
			使用选项：-L .
		库的运行加载路径：每一个库都有一个自己的默认查找路径 .lib64  /usr/lib64
			设置环境变量：LD_LIBRARY_PATH = .(库的运行加载路径)
		gcc是默认动态链接，优先使用的是动态库来生成可执行程序	
		ldd + 可执行程序名称：查看可执行程序的链接信息
		
	通常我们自己链接静态库生成可执行程序的时候，通常不适用-static，而是将静态库放在指定路径下，然后使用gcc -L选项指定库的链接路径链接静态库生成可执行程序
	
	-static作用是：可执行程序使用静态连接生成，不依赖任何动态库(几乎不用)